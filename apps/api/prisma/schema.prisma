// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Customer
  Organizer
}

enum EventType {
  Music
  Nightlife
  Arts
  Holidays
  Dating
  Hobbies
  Bussiness
  Foods
  Others
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      Role
  ownReferralNum   String  // person's own referral number
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  referredByNum String? // referral number of other user who referred this user
  events    Event[]  
  transactions Transaction[]
  coupons    Coupon[]
  pointTransactions PointTransaction[]
  reviews     Review[]
  tickets     Ticket[]

  @@map("users") 
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String  @db.VarChar(255)
  description String  @db.Text
  location    String
  date        DateTime
  price       Float
  capacity    Int
  occupancy   Int @default(0)
  type        EventType
  organizer   User    @relation(fields: [organizerId], references: [id])
  organizerId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  tickets     Ticket[]

  @@map("events")
}

model Ticket {
  id Int @id @default(autoincrement())
  event Event @relation(fields: [eventId], references: [id])
  eventId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  price Float
  transactionId Int
  transaction Transaction @relation(fields: [transactionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tickets")
}

model Coupon {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  expiryDate DateTime
  transactionId Int?
  transaction Transaction? @relation(fields: [transactionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

model PointTransaction {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  points Int
  expiryDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("point_transactions")

}

model Transaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  subtotal  Float
  couponId  Int? 
  coupon    Coupon[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
  
  @@map("transactions")
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
